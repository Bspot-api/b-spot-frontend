// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { AppControllerGetHelloData, AppControllerGetHelloResponses, AppControllerGetHealthData, AppControllerGetHealthResponses, AuthControllerSignUpData, AuthControllerSignUpResponses, AuthControllerSignInData, AuthControllerSignInResponses, AuthControllerChangePasswordData, AuthControllerChangePasswordResponses, CompanyControllerFindAllData, CompanyControllerFindAllResponses, CompanyControllerCreateData, CompanyControllerCreateResponses, CompanyControllerRemoveData, CompanyControllerRemoveResponses, CompanyControllerFindOneData, CompanyControllerFindOneResponses, CompanyControllerUpdateData, CompanyControllerUpdateResponses, FundControllerFindAllData, FundControllerFindAllResponses, FundControllerCreateData, FundControllerCreateResponses, FundControllerRemoveData, FundControllerRemoveResponses, FundControllerFindOneData, FundControllerFindOneResponses, FundControllerUpdateData, FundControllerUpdateResponses, FundControllerGetCompaniesData, FundControllerGetCompaniesResponses, PersonalityControllerFindAllData, PersonalityControllerFindAllResponses, PersonalityControllerCreateData, PersonalityControllerCreateResponses, PersonalityControllerRemoveData, PersonalityControllerRemoveResponses, PersonalityControllerFindOneData, PersonalityControllerFindOneResponses, PersonalityControllerUpdateData, PersonalityControllerUpdateResponses, PersonalityControllerGetCompaniesData, PersonalityControllerGetCompaniesResponses, SectorControllerFindAllData, SectorControllerFindAllResponses, SectorControllerCreateData, SectorControllerCreateResponses, SectorControllerRemoveData, SectorControllerRemoveResponses, SectorControllerFindOneData, SectorControllerFindOneResponses, SectorControllerUpdateData, SectorControllerUpdateResponses, SectorControllerGetCompaniesData, SectorControllerGetCompaniesResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get application status
 */
export const appControllerGetHello = <ThrowOnError extends boolean = false>(options?: Options<AppControllerGetHelloData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerGetHelloResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Health check endpoint
 */
export const appControllerGetHealth = <ThrowOnError extends boolean = false>(options?: Options<AppControllerGetHealthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerGetHealthResponses, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

export const authControllerSignUp = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerSignUpData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthControllerSignUpResponses, unknown, ThrowOnError>({
        url: '/auth/signup',
        ...options
    });
};

export const authControllerSignIn = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerSignInData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthControllerSignInResponses, unknown, ThrowOnError>({
        url: '/auth/signin',
        ...options
    });
};

export const authControllerChangePassword = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerChangePasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthControllerChangePasswordResponses, unknown, ThrowOnError>({
        url: '/auth/change-password',
        ...options
    });
};

/**
 * Get all companies with pagination
 */
export const companyControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<CompanyControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CompanyControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/companies',
        ...options
    });
};

/**
 * Create a new company
 */
export const companyControllerCreate = <ThrowOnError extends boolean = false>(options: Options<CompanyControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CompanyControllerCreateResponses, unknown, ThrowOnError>({
        url: '/companies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a company
 */
export const companyControllerRemove = <ThrowOnError extends boolean = false>(options: Options<CompanyControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CompanyControllerRemoveResponses, unknown, ThrowOnError>({
        url: '/companies/{id}',
        ...options
    });
};

/**
 * Get a company by ID
 */
export const companyControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<CompanyControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CompanyControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/companies/{id}',
        ...options
    });
};

/**
 * Update a company
 */
export const companyControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<CompanyControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CompanyControllerUpdateResponses, unknown, ThrowOnError>({
        url: '/companies/{id}',
        ...options
    });
};

export const fundControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<FundControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FundControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/funds',
        ...options
    });
};

export const fundControllerCreate = <ThrowOnError extends boolean = false>(options?: Options<FundControllerCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<FundControllerCreateResponses, unknown, ThrowOnError>({
        url: '/funds',
        ...options
    });
};

export const fundControllerRemove = <ThrowOnError extends boolean = false>(options: Options<FundControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<FundControllerRemoveResponses, unknown, ThrowOnError>({
        url: '/funds/{id}',
        ...options
    });
};

export const fundControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<FundControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FundControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/funds/{id}',
        ...options
    });
};

export const fundControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<FundControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<FundControllerUpdateResponses, unknown, ThrowOnError>({
        url: '/funds/{id}',
        ...options
    });
};

export const fundControllerGetCompanies = <ThrowOnError extends boolean = false>(options: Options<FundControllerGetCompaniesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FundControllerGetCompaniesResponses, unknown, ThrowOnError>({
        url: '/funds/{id}/companies',
        ...options
    });
};

export const personalityControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<PersonalityControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PersonalityControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/personalities',
        ...options
    });
};

export const personalityControllerCreate = <ThrowOnError extends boolean = false>(options?: Options<PersonalityControllerCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PersonalityControllerCreateResponses, unknown, ThrowOnError>({
        url: '/personalities',
        ...options
    });
};

export const personalityControllerRemove = <ThrowOnError extends boolean = false>(options: Options<PersonalityControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<PersonalityControllerRemoveResponses, unknown, ThrowOnError>({
        url: '/personalities/{id}',
        ...options
    });
};

export const personalityControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<PersonalityControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PersonalityControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/personalities/{id}',
        ...options
    });
};

export const personalityControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<PersonalityControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PersonalityControllerUpdateResponses, unknown, ThrowOnError>({
        url: '/personalities/{id}',
        ...options
    });
};

export const personalityControllerGetCompanies = <ThrowOnError extends boolean = false>(options: Options<PersonalityControllerGetCompaniesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PersonalityControllerGetCompaniesResponses, unknown, ThrowOnError>({
        url: '/personalities/{id}/companies',
        ...options
    });
};

export const sectorControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<SectorControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SectorControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/sectors',
        ...options
    });
};

export const sectorControllerCreate = <ThrowOnError extends boolean = false>(options?: Options<SectorControllerCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<SectorControllerCreateResponses, unknown, ThrowOnError>({
        url: '/sectors',
        ...options
    });
};

export const sectorControllerRemove = <ThrowOnError extends boolean = false>(options: Options<SectorControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SectorControllerRemoveResponses, unknown, ThrowOnError>({
        url: '/sectors/{id}',
        ...options
    });
};

export const sectorControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<SectorControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SectorControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/sectors/{id}',
        ...options
    });
};

export const sectorControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<SectorControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SectorControllerUpdateResponses, unknown, ThrowOnError>({
        url: '/sectors/{id}',
        ...options
    });
};

export const sectorControllerGetCompanies = <ThrowOnError extends boolean = false>(options: Options<SectorControllerGetCompaniesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SectorControllerGetCompaniesResponses, unknown, ThrowOnError>({
        url: '/sectors/{id}/companies',
        ...options
    });
};