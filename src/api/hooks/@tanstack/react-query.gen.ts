// This file is auto-generated by @hey-api/openapi-ts

import { type Options, appControllerGetHello, appControllerGetHealth, authControllerSignUp, authControllerSignIn, authControllerChangePassword, companyControllerFindAll, companyControllerCreate, companyControllerRemove, companyControllerFindOne, companyControllerUpdate, fundControllerFindAll, fundControllerCreate, fundControllerRemove, fundControllerFindOne, fundControllerUpdate, fundControllerGetCompanies, personalityControllerFindAll, personalityControllerCreate, personalityControllerRemove, personalityControllerFindOne, personalityControllerUpdate, personalityControllerGetCompanies, sectorControllerFindAll, sectorControllerCreate, sectorControllerRemove, sectorControllerFindOne, sectorControllerUpdate, sectorControllerGetCompanies } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError, infiniteQueryOptions, type InfiniteData } from '@tanstack/react-query';
import type { AppControllerGetHelloData, AppControllerGetHealthData, AuthControllerSignUpData, AuthControllerSignInData, AuthControllerChangePasswordData, CompanyControllerFindAllData, CompanyControllerFindAllResponse, CompanyControllerCreateData, CompanyControllerCreateResponse, CompanyControllerRemoveData, CompanyControllerFindOneData, CompanyControllerUpdateData, CompanyControllerUpdateResponse, FundControllerFindAllData, FundControllerCreateData, FundControllerRemoveData, FundControllerFindOneData, FundControllerUpdateData, FundControllerGetCompaniesData, PersonalityControllerFindAllData, PersonalityControllerCreateData, PersonalityControllerRemoveData, PersonalityControllerFindOneData, PersonalityControllerUpdateData, PersonalityControllerGetCompaniesData, SectorControllerFindAllData, SectorControllerCreateData, SectorControllerRemoveData, SectorControllerFindOneData, SectorControllerUpdateData, SectorControllerGetCompaniesData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const appControllerGetHelloQueryKey = (options?: Options<AppControllerGetHelloData>) => createQueryKey('appControllerGetHello', options);

/**
 * Get application status
 */
export const appControllerGetHelloOptions = (options?: Options<AppControllerGetHelloData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await appControllerGetHello({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: appControllerGetHelloQueryKey(options)
    });
};

export const appControllerGetHealthQueryKey = (options?: Options<AppControllerGetHealthData>) => createQueryKey('appControllerGetHealth', options);

/**
 * Health check endpoint
 */
export const appControllerGetHealthOptions = (options?: Options<AppControllerGetHealthData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await appControllerGetHealth({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: appControllerGetHealthQueryKey(options)
    });
};

export const authControllerSignUpQueryKey = (options?: Options<AuthControllerSignUpData>) => createQueryKey('authControllerSignUp', options);

export const authControllerSignUpOptions = (options?: Options<AuthControllerSignUpData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await authControllerSignUp({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authControllerSignUpQueryKey(options)
    });
};

export const authControllerSignUpMutation = (options?: Partial<Options<AuthControllerSignUpData>>): UseMutationOptions<unknown, DefaultError, Options<AuthControllerSignUpData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<AuthControllerSignUpData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await authControllerSignUp({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const authControllerSignInQueryKey = (options?: Options<AuthControllerSignInData>) => createQueryKey('authControllerSignIn', options);

export const authControllerSignInOptions = (options?: Options<AuthControllerSignInData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await authControllerSignIn({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authControllerSignInQueryKey(options)
    });
};

export const authControllerSignInMutation = (options?: Partial<Options<AuthControllerSignInData>>): UseMutationOptions<unknown, DefaultError, Options<AuthControllerSignInData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<AuthControllerSignInData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await authControllerSignIn({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const authControllerChangePasswordQueryKey = (options?: Options<AuthControllerChangePasswordData>) => createQueryKey('authControllerChangePassword', options);

export const authControllerChangePasswordOptions = (options?: Options<AuthControllerChangePasswordData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await authControllerChangePassword({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authControllerChangePasswordQueryKey(options)
    });
};

export const authControllerChangePasswordMutation = (options?: Partial<Options<AuthControllerChangePasswordData>>): UseMutationOptions<unknown, DefaultError, Options<AuthControllerChangePasswordData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<AuthControllerChangePasswordData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await authControllerChangePassword({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const companyControllerFindAllQueryKey = (options?: Options<CompanyControllerFindAllData>) => createQueryKey('companyControllerFindAll', options);

/**
 * Get all companies with pagination
 */
export const companyControllerFindAllOptions = (options?: Options<CompanyControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await companyControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: companyControllerFindAllQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = {
        ...queryKey[0]
    };
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const companyControllerFindAllInfiniteQueryKey = (options?: Options<CompanyControllerFindAllData>): QueryKey<Options<CompanyControllerFindAllData>> => createQueryKey('companyControllerFindAll', options, true);

/**
 * Get all companies with pagination
 */
export const companyControllerFindAllInfiniteOptions = (options?: Options<CompanyControllerFindAllData>) => {
    return infiniteQueryOptions<CompanyControllerFindAllResponse, DefaultError, InfiniteData<CompanyControllerFindAllResponse>, QueryKey<Options<CompanyControllerFindAllData>>, number | Pick<QueryKey<Options<CompanyControllerFindAllData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<CompanyControllerFindAllData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await companyControllerFindAll({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: companyControllerFindAllInfiniteQueryKey(options)
    });
};

export const companyControllerCreateQueryKey = (options: Options<CompanyControllerCreateData>) => createQueryKey('companyControllerCreate', options);

/**
 * Create a new company
 */
export const companyControllerCreateOptions = (options: Options<CompanyControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await companyControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: companyControllerCreateQueryKey(options)
    });
};

/**
 * Create a new company
 */
export const companyControllerCreateMutation = (options?: Partial<Options<CompanyControllerCreateData>>): UseMutationOptions<CompanyControllerCreateResponse, DefaultError, Options<CompanyControllerCreateData>> => {
    const mutationOptions: UseMutationOptions<CompanyControllerCreateResponse, DefaultError, Options<CompanyControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await companyControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete a company
 */
export const companyControllerRemoveMutation = (options?: Partial<Options<CompanyControllerRemoveData>>): UseMutationOptions<unknown, DefaultError, Options<CompanyControllerRemoveData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<CompanyControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await companyControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const companyControllerFindOneQueryKey = (options: Options<CompanyControllerFindOneData>) => createQueryKey('companyControllerFindOne', options);

/**
 * Get a company by ID
 */
export const companyControllerFindOneOptions = (options: Options<CompanyControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await companyControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: companyControllerFindOneQueryKey(options)
    });
};

/**
 * Update a company
 */
export const companyControllerUpdateMutation = (options?: Partial<Options<CompanyControllerUpdateData>>): UseMutationOptions<CompanyControllerUpdateResponse, DefaultError, Options<CompanyControllerUpdateData>> => {
    const mutationOptions: UseMutationOptions<CompanyControllerUpdateResponse, DefaultError, Options<CompanyControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await companyControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const fundControllerFindAllQueryKey = (options?: Options<FundControllerFindAllData>) => createQueryKey('fundControllerFindAll', options);

export const fundControllerFindAllOptions = (options?: Options<FundControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await fundControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: fundControllerFindAllQueryKey(options)
    });
};

export const fundControllerCreateQueryKey = (options?: Options<FundControllerCreateData>) => createQueryKey('fundControllerCreate', options);

export const fundControllerCreateOptions = (options?: Options<FundControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await fundControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: fundControllerCreateQueryKey(options)
    });
};

export const fundControllerCreateMutation = (options?: Partial<Options<FundControllerCreateData>>): UseMutationOptions<unknown, DefaultError, Options<FundControllerCreateData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<FundControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await fundControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const fundControllerRemoveMutation = (options?: Partial<Options<FundControllerRemoveData>>): UseMutationOptions<unknown, DefaultError, Options<FundControllerRemoveData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<FundControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await fundControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const fundControllerFindOneQueryKey = (options: Options<FundControllerFindOneData>) => createQueryKey('fundControllerFindOne', options);

export const fundControllerFindOneOptions = (options: Options<FundControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await fundControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: fundControllerFindOneQueryKey(options)
    });
};

export const fundControllerUpdateMutation = (options?: Partial<Options<FundControllerUpdateData>>): UseMutationOptions<unknown, DefaultError, Options<FundControllerUpdateData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<FundControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await fundControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const fundControllerGetCompaniesQueryKey = (options: Options<FundControllerGetCompaniesData>) => createQueryKey('fundControllerGetCompanies', options);

export const fundControllerGetCompaniesOptions = (options: Options<FundControllerGetCompaniesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await fundControllerGetCompanies({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: fundControllerGetCompaniesQueryKey(options)
    });
};

export const personalityControllerFindAllQueryKey = (options?: Options<PersonalityControllerFindAllData>) => createQueryKey('personalityControllerFindAll', options);

export const personalityControllerFindAllOptions = (options?: Options<PersonalityControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await personalityControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: personalityControllerFindAllQueryKey(options)
    });
};

export const personalityControllerCreateQueryKey = (options?: Options<PersonalityControllerCreateData>) => createQueryKey('personalityControllerCreate', options);

export const personalityControllerCreateOptions = (options?: Options<PersonalityControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await personalityControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: personalityControllerCreateQueryKey(options)
    });
};

export const personalityControllerCreateMutation = (options?: Partial<Options<PersonalityControllerCreateData>>): UseMutationOptions<unknown, DefaultError, Options<PersonalityControllerCreateData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PersonalityControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await personalityControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const personalityControllerRemoveMutation = (options?: Partial<Options<PersonalityControllerRemoveData>>): UseMutationOptions<unknown, DefaultError, Options<PersonalityControllerRemoveData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PersonalityControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await personalityControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const personalityControllerFindOneQueryKey = (options: Options<PersonalityControllerFindOneData>) => createQueryKey('personalityControllerFindOne', options);

export const personalityControllerFindOneOptions = (options: Options<PersonalityControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await personalityControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: personalityControllerFindOneQueryKey(options)
    });
};

export const personalityControllerUpdateMutation = (options?: Partial<Options<PersonalityControllerUpdateData>>): UseMutationOptions<unknown, DefaultError, Options<PersonalityControllerUpdateData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PersonalityControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await personalityControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const personalityControllerGetCompaniesQueryKey = (options: Options<PersonalityControllerGetCompaniesData>) => createQueryKey('personalityControllerGetCompanies', options);

export const personalityControllerGetCompaniesOptions = (options: Options<PersonalityControllerGetCompaniesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await personalityControllerGetCompanies({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: personalityControllerGetCompaniesQueryKey(options)
    });
};

export const sectorControllerFindAllQueryKey = (options?: Options<SectorControllerFindAllData>) => createQueryKey('sectorControllerFindAll', options);

export const sectorControllerFindAllOptions = (options?: Options<SectorControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await sectorControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: sectorControllerFindAllQueryKey(options)
    });
};

export const sectorControllerCreateQueryKey = (options?: Options<SectorControllerCreateData>) => createQueryKey('sectorControllerCreate', options);

export const sectorControllerCreateOptions = (options?: Options<SectorControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await sectorControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: sectorControllerCreateQueryKey(options)
    });
};

export const sectorControllerCreateMutation = (options?: Partial<Options<SectorControllerCreateData>>): UseMutationOptions<unknown, DefaultError, Options<SectorControllerCreateData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<SectorControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await sectorControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const sectorControllerRemoveMutation = (options?: Partial<Options<SectorControllerRemoveData>>): UseMutationOptions<unknown, DefaultError, Options<SectorControllerRemoveData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<SectorControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await sectorControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const sectorControllerFindOneQueryKey = (options: Options<SectorControllerFindOneData>) => createQueryKey('sectorControllerFindOne', options);

export const sectorControllerFindOneOptions = (options: Options<SectorControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await sectorControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: sectorControllerFindOneQueryKey(options)
    });
};

export const sectorControllerUpdateMutation = (options?: Partial<Options<SectorControllerUpdateData>>): UseMutationOptions<unknown, DefaultError, Options<SectorControllerUpdateData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<SectorControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await sectorControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const sectorControllerGetCompaniesQueryKey = (options: Options<SectorControllerGetCompaniesData>) => createQueryKey('sectorControllerGetCompanies', options);

export const sectorControllerGetCompaniesOptions = (options: Options<SectorControllerGetCompaniesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await sectorControllerGetCompanies({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: sectorControllerGetCompaniesQueryKey(options)
    });
};